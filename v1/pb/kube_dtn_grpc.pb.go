// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/v1/kube_dtn.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	ApplyLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ApplyLinksWithTimeout(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ApplyLinksAsync(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ListLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*LinksBatchResponse, error)
	RemoveNode(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ApplyLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/ApplyLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ApplyLinksWithTimeout(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/ApplyLinksWithTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ApplyLinksAsync(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/ApplyLinksAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*LinksBatchResponse, error) {
	out := new(LinksBatchResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/ListLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RemoveNode(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	ApplyLinks(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ApplyLinksWithTimeout(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ApplyLinksAsync(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ListLinks(context.Context, *LinksBatchQuery) (*LinksBatchResponse, error)
	RemoveNode(context.Context, *NetworkNode) (*BoolResponse, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) ApplyLinks(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinks not implemented")
}
func (UnimplementedControllerServer) ApplyLinksWithTimeout(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinksWithTimeout not implemented")
}
func (UnimplementedControllerServer) ApplyLinksAsync(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinksAsync not implemented")
}
func (UnimplementedControllerServer) ListLinks(context.Context, *LinksBatchQuery) (*LinksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedControllerServer) RemoveNode(context.Context, *NetworkNode) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_ApplyLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ApplyLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ApplyLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ApplyLinks(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ApplyLinksWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ApplyLinksWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ApplyLinksWithTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ApplyLinksWithTimeout(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ApplyLinksAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ApplyLinksAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ApplyLinksAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ApplyLinksAsync(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ListLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListLinks(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RemoveNode(ctx, req.(*NetworkNode))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyLinks",
			Handler:    _Controller_ApplyLinks_Handler,
		},
		{
			MethodName: "ApplyLinksWithTimeout",
			Handler:    _Controller_ApplyLinksWithTimeout_Handler,
		},
		{
			MethodName: "ApplyLinksAsync",
			Handler:    _Controller_ApplyLinksAsync_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _Controller_ListLinks_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Controller_RemoveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/kube_dtn.proto",
}

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	AddLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ConfigurePod(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error)
	UnconfigurePod(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error)
	SetupPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	DestroyPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) AddLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/AddLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DeleteLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/DeleteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UpdateLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/UpdateLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ConfigurePod(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/ConfigurePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UnconfigurePod(ctx context.Context, in *NetworkNode, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/UnconfigurePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SetupPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/SetupPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DestroyPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/DestroyPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	AddLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	DeleteLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	UpdateLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	ConfigurePod(context.Context, *NetworkNode) (*BoolResponse, error)
	UnconfigurePod(context.Context, *NetworkNode) (*BoolResponse, error)
	SetupPod(context.Context, *PodQuery) (*BoolResponse, error)
	DestroyPod(context.Context, *PodQuery) (*BoolResponse, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) AddLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLinks not implemented")
}
func (UnimplementedDaemonServer) DeleteLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinks not implemented")
}
func (UnimplementedDaemonServer) UpdateLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinks not implemented")
}
func (UnimplementedDaemonServer) ConfigurePod(context.Context, *NetworkNode) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePod not implemented")
}
func (UnimplementedDaemonServer) UnconfigurePod(context.Context, *NetworkNode) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnconfigurePod not implemented")
}
func (UnimplementedDaemonServer) SetupPod(context.Context, *PodQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupPod not implemented")
}
func (UnimplementedDaemonServer) DestroyPod(context.Context, *PodQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPod not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_AddLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).AddLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/AddLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).AddLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DeleteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DeleteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/DeleteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DeleteLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UpdateLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).UpdateLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/UpdateLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).UpdateLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ConfigurePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ConfigurePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/ConfigurePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ConfigurePod(ctx, req.(*NetworkNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UnconfigurePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).UnconfigurePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/UnconfigurePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).UnconfigurePod(ctx, req.(*NetworkNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SetupPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SetupPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/SetupPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SetupPod(ctx, req.(*PodQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DestroyPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DestroyPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/DestroyPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DestroyPod(ctx, req.(*PodQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLinks",
			Handler:    _Daemon_AddLinks_Handler,
		},
		{
			MethodName: "DeleteLinks",
			Handler:    _Daemon_DeleteLinks_Handler,
		},
		{
			MethodName: "UpdateLinks",
			Handler:    _Daemon_UpdateLinks_Handler,
		},
		{
			MethodName: "ConfigurePod",
			Handler:    _Daemon_ConfigurePod_Handler,
		},
		{
			MethodName: "UnconfigurePod",
			Handler:    _Daemon_UnconfigurePod_Handler,
		},
		{
			MethodName: "SetupPod",
			Handler:    _Daemon_SetupPod_Handler,
		},
		{
			MethodName: "DestroyPod",
			Handler:    _Daemon_DestroyPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/kube_dtn.proto",
}

// VMSidecarClient is the client API for VMSidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMSidecarClient interface {
	AddVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	DelVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
}

type vMSidecarClient struct {
	cc grpc.ClientConnInterface
}

func NewVMSidecarClient(cc grpc.ClientConnInterface) VMSidecarClient {
	return &vMSidecarClient{cc}
}

func (c *vMSidecarClient) AddVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.VMSidecar/AddVMLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSidecarClient) DelVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.VMSidecar/DelVMLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSidecarClient) UpdateVMLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.VMSidecar/UpdateVMLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMSidecarServer is the server API for VMSidecar service.
// All implementations must embed UnimplementedVMSidecarServer
// for forward compatibility
type VMSidecarServer interface {
	AddVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	DelVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	UpdateVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	mustEmbedUnimplementedVMSidecarServer()
}

// UnimplementedVMSidecarServer must be embedded to have forward compatible implementations.
type UnimplementedVMSidecarServer struct {
}

func (UnimplementedVMSidecarServer) AddVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVMLinks not implemented")
}
func (UnimplementedVMSidecarServer) DelVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVMLinks not implemented")
}
func (UnimplementedVMSidecarServer) UpdateVMLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMLinks not implemented")
}
func (UnimplementedVMSidecarServer) mustEmbedUnimplementedVMSidecarServer() {}

// UnsafeVMSidecarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMSidecarServer will
// result in compilation errors.
type UnsafeVMSidecarServer interface {
	mustEmbedUnimplementedVMSidecarServer()
}

func RegisterVMSidecarServer(s grpc.ServiceRegistrar, srv VMSidecarServer) {
	s.RegisterService(&VMSidecar_ServiceDesc, srv)
}

func _VMSidecar_AddVMLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSidecarServer).AddVMLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VMSidecar/AddVMLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSidecarServer).AddVMLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSidecar_DelVMLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSidecarServer).DelVMLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VMSidecar/DelVMLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSidecarServer).DelVMLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSidecar_UpdateVMLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSidecarServer).UpdateVMLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VMSidecar/UpdateVMLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSidecarServer).UpdateVMLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// VMSidecar_ServiceDesc is the grpc.ServiceDesc for VMSidecar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMSidecar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VMSidecar",
	HandlerType: (*VMSidecarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVMLinks",
			Handler:    _VMSidecar_AddVMLinks_Handler,
		},
		{
			MethodName: "DelVMLinks",
			Handler:    _VMSidecar_DelVMLinks_Handler,
		},
		{
			MethodName: "UpdateVMLinks",
			Handler:    _VMSidecar_UpdateVMLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/kube_dtn.proto",
}
