// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/v1/kube_dtn.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerExternalClient is the client API for ControllerExternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerExternalClient interface {
	ApplyLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ApplyLinksWithTimeout(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ApplyLinksAsync(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ListLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*LinksBatchResponse, error)
}

type controllerExternalClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerExternalClient(cc grpc.ClientConnInterface) ControllerExternalClient {
	return &controllerExternalClient{cc}
}

func (c *controllerExternalClient) ApplyLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.ControllerExternal/ApplyLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerExternalClient) ApplyLinksWithTimeout(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.ControllerExternal/ApplyLinksWithTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerExternalClient) ApplyLinksAsync(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.ControllerExternal/ApplyLinksAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerExternalClient) ListLinks(ctx context.Context, in *LinksBatchQuery, opts ...grpc.CallOption) (*LinksBatchResponse, error) {
	out := new(LinksBatchResponse)
	err := c.cc.Invoke(ctx, "/pb.ControllerExternal/ListLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerExternalServer is the server API for ControllerExternal service.
// All implementations must embed UnimplementedControllerExternalServer
// for forward compatibility
type ControllerExternalServer interface {
	ApplyLinks(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ApplyLinksWithTimeout(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ApplyLinksAsync(context.Context, *LinksBatchQuery) (*BoolResponse, error)
	ListLinks(context.Context, *LinksBatchQuery) (*LinksBatchResponse, error)
	mustEmbedUnimplementedControllerExternalServer()
}

// UnimplementedControllerExternalServer must be embedded to have forward compatible implementations.
type UnimplementedControllerExternalServer struct {
}

func (UnimplementedControllerExternalServer) ApplyLinks(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinks not implemented")
}
func (UnimplementedControllerExternalServer) ApplyLinksWithTimeout(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinksWithTimeout not implemented")
}
func (UnimplementedControllerExternalServer) ApplyLinksAsync(context.Context, *LinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLinksAsync not implemented")
}
func (UnimplementedControllerExternalServer) ListLinks(context.Context, *LinksBatchQuery) (*LinksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedControllerExternalServer) mustEmbedUnimplementedControllerExternalServer() {}

// UnsafeControllerExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerExternalServer will
// result in compilation errors.
type UnsafeControllerExternalServer interface {
	mustEmbedUnimplementedControllerExternalServer()
}

func RegisterControllerExternalServer(s grpc.ServiceRegistrar, srv ControllerExternalServer) {
	s.RegisterService(&ControllerExternal_ServiceDesc, srv)
}

func _ControllerExternal_ApplyLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerExternalServer).ApplyLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerExternal/ApplyLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerExternalServer).ApplyLinks(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerExternal_ApplyLinksWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerExternalServer).ApplyLinksWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerExternal/ApplyLinksWithTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerExternalServer).ApplyLinksWithTimeout(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerExternal_ApplyLinksAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerExternalServer).ApplyLinksAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerExternal/ApplyLinksAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerExternalServer).ApplyLinksAsync(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerExternal_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerExternalServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControllerExternal/ListLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerExternalServer).ListLinks(ctx, req.(*LinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerExternal_ServiceDesc is the grpc.ServiceDesc for ControllerExternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerExternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControllerExternal",
	HandlerType: (*ControllerExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyLinks",
			Handler:    _ControllerExternal_ApplyLinks_Handler,
		},
		{
			MethodName: "ApplyLinksWithTimeout",
			Handler:    _ControllerExternal_ApplyLinksWithTimeout_Handler,
		},
		{
			MethodName: "ApplyLinksAsync",
			Handler:    _ControllerExternal_ApplyLinksAsync_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _ControllerExternal_ListLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/kube_dtn.proto",
}

// ControllerInternalClient is the client API for ControllerInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerInternalClient interface {
}

type controllerInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerInternalClient(cc grpc.ClientConnInterface) ControllerInternalClient {
	return &controllerInternalClient{cc}
}

// ControllerInternalServer is the server API for ControllerInternal service.
// All implementations must embed UnimplementedControllerInternalServer
// for forward compatibility
type ControllerInternalServer interface {
	mustEmbedUnimplementedControllerInternalServer()
}

// UnimplementedControllerInternalServer must be embedded to have forward compatible implementations.
type UnimplementedControllerInternalServer struct {
}

func (UnimplementedControllerInternalServer) mustEmbedUnimplementedControllerInternalServer() {}

// UnsafeControllerInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerInternalServer will
// result in compilation errors.
type UnsafeControllerInternalServer interface {
	mustEmbedUnimplementedControllerInternalServer()
}

func RegisterControllerInternalServer(s grpc.ServiceRegistrar, srv ControllerInternalServer) {
	s.RegisterService(&ControllerInternal_ServiceDesc, srv)
}

// ControllerInternal_ServiceDesc is the grpc.ServiceDesc for ControllerInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControllerInternal",
	HandlerType: (*ControllerInternalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/proto/v1/kube_dtn.proto",
}

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	AddLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	ConfigurePod(ctx context.Context, in *NetworkNodeQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	UnconfigurePod(ctx context.Context, in *NetworkNodeQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	SetupPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error)
	DestroyPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) AddLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/AddLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DeleteLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/DeleteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UpdateLinks(ctx context.Context, in *InternalLinksBatchQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/UpdateLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ConfigurePod(ctx context.Context, in *NetworkNodeQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/ConfigurePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) UnconfigurePod(ctx context.Context, in *NetworkNodeQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/UnconfigurePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SetupPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/SetupPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) DestroyPod(ctx context.Context, in *PodQuery, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Daemon/DestroyPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	AddLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	DeleteLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	UpdateLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error)
	ConfigurePod(context.Context, *NetworkNodeQuery) (*BoolResponse, error)
	UnconfigurePod(context.Context, *NetworkNodeQuery) (*BoolResponse, error)
	SetupPod(context.Context, *PodQuery) (*BoolResponse, error)
	DestroyPod(context.Context, *PodQuery) (*BoolResponse, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) AddLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLinks not implemented")
}
func (UnimplementedDaemonServer) DeleteLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinks not implemented")
}
func (UnimplementedDaemonServer) UpdateLinks(context.Context, *InternalLinksBatchQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinks not implemented")
}
func (UnimplementedDaemonServer) ConfigurePod(context.Context, *NetworkNodeQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePod not implemented")
}
func (UnimplementedDaemonServer) UnconfigurePod(context.Context, *NetworkNodeQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnconfigurePod not implemented")
}
func (UnimplementedDaemonServer) SetupPod(context.Context, *PodQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupPod not implemented")
}
func (UnimplementedDaemonServer) DestroyPod(context.Context, *PodQuery) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPod not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_AddLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).AddLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/AddLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).AddLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DeleteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DeleteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/DeleteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DeleteLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UpdateLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalLinksBatchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).UpdateLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/UpdateLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).UpdateLinks(ctx, req.(*InternalLinksBatchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ConfigurePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ConfigurePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/ConfigurePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ConfigurePod(ctx, req.(*NetworkNodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_UnconfigurePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).UnconfigurePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/UnconfigurePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).UnconfigurePod(ctx, req.(*NetworkNodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SetupPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SetupPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/SetupPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SetupPod(ctx, req.(*PodQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_DestroyPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).DestroyPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Daemon/DestroyPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).DestroyPod(ctx, req.(*PodQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLinks",
			Handler:    _Daemon_AddLinks_Handler,
		},
		{
			MethodName: "DeleteLinks",
			Handler:    _Daemon_DeleteLinks_Handler,
		},
		{
			MethodName: "UpdateLinks",
			Handler:    _Daemon_UpdateLinks_Handler,
		},
		{
			MethodName: "ConfigurePod",
			Handler:    _Daemon_ConfigurePod_Handler,
		},
		{
			MethodName: "UnconfigurePod",
			Handler:    _Daemon_UnconfigurePod_Handler,
		},
		{
			MethodName: "SetupPod",
			Handler:    _Daemon_SetupPod_Handler,
		},
		{
			MethodName: "DestroyPod",
			Handler:    _Daemon_DestroyPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/kube_dtn.proto",
}
