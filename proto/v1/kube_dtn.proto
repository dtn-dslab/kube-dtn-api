syntax = "proto3";

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package pb;

option go_package = "api/v1/pb";

message NetworkIntf {
  int64 uid = 1;
  string name = 2;
  string mac = 3;
  string ipv4 = 4;
  string ipv6 = 5;
}

message NetworkNode {
  string name = 1;
  string namespace = 2;
  repeated NetworkIntf network_intfs = 3;
  PodStatus pod_status = 4;
}

message PodStatus {
  string daemon_ip = 1;
  string net_ns = 2;
  string pod_type = 3;
  string pod_ip = 4;
}

message Link {
  int64 uid = 1;
  int64 src = 2;
  int64 dst = 3;
  LinkProperties properties = 4;
  bool uni_directional = 5;
}

message LinkProperties {
  // Latency in duration string format, e.g. "300ms", "1.5s".
  // Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
  string latency = 1;
  // Latency correlation in float percentage, e.g. "55.0".
  string latency_corr = 2;
  // Jitter in duration string format, e.g. "300ms", "1.5s".
	// Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
  string jitter = 3;
  // Loss rate in float percentage, e.g. "55.0".
  string loss = 4;
  // Loss correlation in float percentage, e.g. "55.0".
  string loss_corr = 5;
  // Bandwidth rate limit, e.g. 1000(bit/s), 100kbit, 100Mbps, 1Gibps.
	// For more information, refer to https://man7.org/linux/man-pages/man8/tc.8.html.
  string rate = 6;
  // Gap every N packets
  uint32 gap = 7;
  // Duplicate rate in float percentage, e.g. "55.0".
  string duplicate = 8;
  // Duplicate correlation in float percentage, e.g. "55.0".
  string duplicate_corr = 9;
  // Reorder probability in float percentage, e.g. "55.0".
  string reorder_prob = 10;
  // Reorder correlation in float percentage, e.g. "55.0".
  string reorder_corr = 11;
  // Corrupt probability in float percentage, e.g. "55.0".
  string corrupt_prob = 12;
  // Corrupt correlation in float percentage, e.g. "55.0".
  string corrupt_corr = 13;
}

message PodQuery {
  string name = 1;
  string kube_ns = 2;
  string net_ns = 3;
}

message InternalLink {
  int64 uid = 1;

  string kube_ns = 2;
  string net_ns = 3;
  string remote = 4;

  string local_name = 5;
  string local_intf = 6;
  string local_mac = 7;

  string peer_name = 8;
  string peer_intf = 9;
  string peer_mac = 10;

  LinkProperties properties = 11;
}

message LinksBatchQuery {
  google.protobuf.Timestamp version = 1;
  repeated Link links = 2;
  bool full = 3;
  int32 timeout = 4;
  string namespace = 5;
  string name = 6;
}

message LinksBatchResponse {
  bool response = 1;
  repeated Link links = 2;
}

message InternalLinksBatchQuery {
  repeated InternalLink links = 1;
}

message BoolResponse {
  bool response = 1;
}

service Controller {
  rpc ApplyLinks (LinksBatchQuery) returns (BoolResponse);
  rpc ApplyLinksWithTimeout (LinksBatchQuery) returns (BoolResponse);
  rpc ApplyLinksAsync (LinksBatchQuery) returns (BoolResponse);

  rpc ListLinks (LinksBatchQuery) returns (LinksBatchResponse);

  // For internal use

  rpc RemoveNode (NetworkNode) returns (BoolResponse);
}

service Daemon {
  rpc AddLinks (InternalLinksBatchQuery) returns (BoolResponse);
  rpc DeleteLinks (InternalLinksBatchQuery) returns (BoolResponse);
  rpc UpdateLinks (InternalLinksBatchQuery) returns (BoolResponse);

  rpc ConfigurePod (NetworkNode) returns (BoolResponse);
  rpc UnconfigurePod (NetworkNode) returns (BoolResponse);

  rpc SetupPod (PodQuery) returns (BoolResponse);
  rpc DestroyPod (PodQuery) returns (BoolResponse);
}

service VMSidecar {
  rpc AddVMLinks (InternalLinksBatchQuery) returns (BoolResponse);
  rpc DelVMLinks (InternalLinksBatchQuery) returns (BoolResponse);
  rpc UpdateVMLinks (InternalLinksBatchQuery) returns (BoolResponse);
}
